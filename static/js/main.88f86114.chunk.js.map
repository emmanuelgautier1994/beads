{"version":3,"sources":["components/canvas.js","components/grid.js","components/size-picker.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","props","range","s","Array","keys","state","size","this","viewBox","width","height","flatMap","x","map","y","key","fill","stroke","strokeWidth","React","Component","Grid","className","style","type","onClick","goHome","gridSize","SizePicker","submitSliderValue","useState","sizeValue","setSizeValue","id","min","max","step","value","onChange","e","target","App","setState","v","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSA0BeA,E,kDAvBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,MAAQ,SAACC,GAAD,mBAAWC,MAAMD,GAAGE,SAH1B,EAAKC,MAAQ,GAFI,E,qDAOV,IAAD,OACAC,EAAOC,KAAKP,MAAMM,KAClBE,EAAO,cAAU,EAAEF,EAAZ,YAAoB,EAAEA,EAAK,GACxC,OACE,yBAAKG,MAAM,OAAOC,OAAO,OAAOF,QAASA,GACtCD,KAAKN,MAAMK,GAAMK,SAAQ,SAAAC,GAAC,OAAI,EAAKX,MAAMK,GAAMO,KAAI,SAAAC,GAAC,OACnD,0BACEC,IAAKT,EAAKM,EAAIE,EAAGF,EAAG,EAAEA,EAAGE,EAAGF,EAAI,EAAI,EAAEE,EAAI,EAAI,EAAEA,EAAGL,MAAM,IAAIC,OAAO,IACpEM,KAAK,QAAQC,OAAO,QAAQC,YAAY,mB,GAhB/BC,IAAMC,WCuBZC,E,kDArBb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,GAFI,E,qDAMjB,OACE,yBAAKiB,UAAU,2DAA2DC,MAAO,CAACb,OAAQ,SACxF,yBAAKY,UAAU,0BACb,4BAAQE,KAAK,SAASF,UAAU,eAAeG,QAASlB,KAAKP,MAAM0B,QACjE,uBAAGJ,UAAU,cAGjB,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAQhB,KAAMC,KAAKP,MAAM2B,iB,GAfhBR,IAAMC,W,OCyBVQ,G,MAzBI,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBAAwB,EACVV,IAAMW,SAAS,GADL,mBACrCC,EADqC,KAC1BC,EAD0B,KAG5C,OACE,yBAAKV,UAAU,wDAAwDC,MAAO,CAACb,OAAQ,SACrF,yBAAKY,UAAU,gBACb,8CAEF,yBAAKA,UAAU,gBACb,2BACAW,GAAG,mBAAmBX,UAAU,SAChCE,KAAK,QAAQU,IAAI,IAAIC,IAAI,KAAKC,KAAK,IACnCC,MAAON,EACPO,SAAU,SAACC,GAAOP,EAAaO,EAAEC,OAAOH,UAExC,6BACCN,EARH,MAQiBA,GAEjB,yBAAKT,UAAU,gBACf,4BAAQE,KAAK,SAASF,UAAU,iBAAiBG,QAAS,WAAKI,EAAkBE,KAAjF,iBCCSU,E,kDAjBb,WAAYzC,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CAAEsB,SAAU,GAFR,E,qDAKV,IAAD,OACAA,EAAWpB,KAAKF,MAAMsB,SAC5B,OACE,yBAAKL,UAAU,MAAMC,MAAO,CAACb,OAAQ,SAClCiB,EAAW,EACZ,kBAAC,EAAD,CAAMA,SAAUA,EAAUD,OAAQ,WAAQ,EAAKgB,SAAS,CAACf,SAAU,OACnE,kBAAC,EAAD,CAAYE,kBAAmB,SAACc,GAAQ,EAAKD,SAAS,CAACf,SAAUiB,SAASD,a,GAZhExB,IAAMC,WCOJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.88f86114.chunk.js","sourcesContent":["import React from 'react'\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { }\n  }\n\n  range = (s) => [...Array(s).keys()]\n\n  render(){\n    const size = this.props.size\n    const viewBox = `0 0 ${2*size} ${2*size+1}`\n    return (\n      <svg width=\"100%\" height=\"100%\" viewBox={viewBox}>\n        {this.range(size).flatMap(x => this.range(size).map(y => \n          <rect\n            key={size*x + y} x={2*x} y={x % 2 ? 2*y + 1 : 2*y} width=\"2\" height=\"2\"\n            fill=\"white\" stroke=\"black\" strokeWidth=\"0.1\"\n          />\n        ))}\n      </svg>\n    )\n  }\n}\n\nexport default Canvas\n","import React from 'react'\nimport Canvas from './canvas'\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { }\n  }\n\n  render(){\n    return (\n      <div className=\"grid-y grid-padding-y grid-padding-x align-center-middle\" style={{height: '100%'}}>\n        <div className=\"cell small-1 text-left\">\n          <button type=\"button\" className=\"alert button\" onClick={this.props.goHome}>\n            <i className=\"fi-home\"></i>\n          </button>\n        </div>\n        <div className=\"cell auto\">\n          <Canvas size={this.props.gridSize} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Grid\n","import React from 'react'\nimport './size-picker.css'\n\nconst SizePicker = ({ submitSliderValue }) => {\n  const [sizeValue, setSizeValue] = React.useState(5)\n\n  return (\n    <div className=\"grid-y grid-padding-y align-center-middle text-center\" style={{height: '100%'}}>\n      <div className=\"cell small-1\">\n        <p>Pick grid size</p>\n      </div>\n      <div className=\"cell small-2\">\n        <input\n        id=\"grid-size-picker\" className=\"slider\"\n        type=\"range\" min=\"5\" max=\"50\" step=\"1\"\n        value={sizeValue}\n        onChange={(e) => {setSizeValue(e.target.value)}}\n        />\n        <br />\n        {sizeValue} x {sizeValue}\n      </div>\n      <div className=\"cell small-1\">\n      <button type=\"button\" className=\"success button\" onClick={()=>{submitSliderValue(sizeValue)}}>Let's go!</button>\n      </div>\n    </div>\n  )\n}\n\nexport default SizePicker","import React from 'react'\nimport './App.css'\nimport Grid from './components/grid'\nimport SizePicker from './components/size-picker'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { gridSize: 0 }\n  }\n\n  render(){\n    const gridSize = this.state.gridSize\n    return (\n      <div className=\"App\" style={{height: '100%'}}>\n        {gridSize > 0 ?\n        <Grid gridSize={gridSize} goHome={() => { this.setState({gridSize: 0}) }} /> :\n        <SizePicker submitSliderValue={(v) => { this.setState({gridSize: parseInt(v)})} } />}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}