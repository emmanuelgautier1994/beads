{"version":3,"sources":["components/current-color-context.js","components/bead.js","components/canvas.js","components/color-picker.js","components/grid.js","components/size-picker.js","App.js","serviceWorker.js","index.js"],"names":["CurrentColorContext","React","createContext","Bead","props","currentColor","context","color","setState","fill","state","this","x","y","width","height","stroke","strokeWidth","onClick","onTouchStart","Component","contextType","Canvas","range","s","Array","keys","size","viewBox","onClickBead","flatMap","map","key","ColorPicker","currentColorStyle","background","current","borderRadius","className","style","onChange","c","setCurrentColor","hex","toUpperCase","history","slice","i","cursor","margin","Grid","pickNewColor","updateHistory","prevState","Set","concat","console","log","type","goHome","Provider","value","gridSize","SizePicker","submitSliderValue","useState","sizeValue","setSizeValue","id","min","max","step","e","target","stopPropagation","App","v","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc25685d.chunk.js","sourcesContent":["import React from 'react'\n\nexport const CurrentColorContext = React.createContext(\"#000000\")\n","import React from 'react'\nimport { CurrentColorContext } from './current-color-context'\n\nclass Bead extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { fill: \"white\"}\n  }\n\n  currentColor = () => this.context\n\n  color = () => this.setState({fill: this.currentColor()})\n  // handleTouch = (e) => {\n  //   if(this.state.fill === \"red\"){\n  //     console.log(\":(\")\n  //     return\n  //   }\n  //   console.log(new Date())\n  //   this.color(\"red\")\n  // }\n\n  render(){\n    const {Â x, y } = this.props\n    return (\n      <rect\n        x={2*x} y={x % 2 ? 2*y + 1.25 : 2*y + 0.25} width=\"2\" height=\"2\"\n        fill={this.state.fill} stroke=\"black\" strokeWidth=\"0.1\"\n        onClick={this.color}\n        onTouchStart={this.color}\n        // onTouchMove={this.handleTouch}\n      />\n    )\n  }\n}\n\nBead.contextType = CurrentColorContext\n\nexport default Bead\n","import React from 'react'\nimport Bead from './bead'\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { }\n  }\n\n  range = (s) => [...Array(s).keys()]\n\n  render(){\n    const size = this.props.size\n    const viewBox = `0 0 ${2*size} ${2*(size+1)}`\n    return (\n      <svg width=\"100%\" height=\"100%\" viewBox={viewBox} onClick={this.props.onClickBead}\n      onTouchStart={this.props.onClickBead}>\n        {this.range(size).flatMap(x => this.range(size).map(y => \n          <Bead key={size*x + y} x={x} y={y} />\n        ))}\n      </svg>\n    )\n  }\n}\n\nexport default Canvas\n","import React from 'react'\nimport { CurrentColorContext } from './current-color-context'\nimport './color-picker.css'\nimport { SliderPicker } from 'react-color'\n\nclass ColorPicker extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { }\n  }\n\n\n  render(){\n    const currentColorStyle = {background: this.props.current, color: \"white\", borderRadius: '0.5em'}\n    return (\n      <div className=\"grid-x grid-padding-x grid-padding-y align-center-middle\" style={{height: '100%'}}>\n        <div className=\"cell small-5\">\n          <SliderPicker\n            color={this.props.current}\n            onChange={(c) => {this.props.setCurrentColor(c.hex)}}\n          />\n        </div>\n        <div className=\"cell small-1 align-center-middle text-center\" style={currentColorStyle}>\n              <b>{this.props.current.toUpperCase()}</b>\n          {/* <svg height=\"100%\"><rect x=\"0\" y=\"0\" width=\"1\" height=\"1\" fill={this.props.current}></rect></svg> */}\n        </div>\n        <div className=\"cell small-4\">\n          <div className=\"grid-x grid-margin-y\">\n            {this.props.history.slice(0,12).map((c, i) => (\n              <div\n                key={`history-${i}`}\n                className='cell small-1'\n                style={{background: c, width: '2em', height: '2em', cursor: 'pointer', borderRadius:'2em', margin: '0 0.5em'}}\n                onClick={() => {this.props.setCurrentColor(c)}}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nColorPicker.contextType = CurrentColorContext\n\n\nexport default ColorPicker\n","import React from 'react'\nimport Canvas from './canvas'\nimport ColorPicker from './color-picker'\nimport { CurrentColorContext } from './current-color-context'\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { currentColor: \"#ed281a\", history: [] }\n  }\n\n  pickNewColor = (c) => {this.setState({currentColor: c})}\n\n\n  updateHistory = (c) => {this.setState((prevState) => ({\n    history: [...new Set(prevState.history.concat([c]))]\n  }))}\n\n\n  render(){\n    console.log(this.state)\n    return (\n      <div className=\"grid-y grid-padding-y grid-padding-x align-center-middle\" style={{height: '100%'}}>\n        <div className=\"cell small-1 text-left\">\n          <div className=\"grid-x\">\n            <div className=\"cell small-1\">\n              <button type=\"button\" className=\"alert button\" onClick={this.props.goHome}>\n                <i className=\"fi-home\"></i>\n              </button>\n            </div>\n            <div className=\"cell small-11\">\n              <ColorPicker current={this.state.currentColor} history={this.state.history} setCurrentColor={this.pickNewColor} />\n            </div>\n          </div>\n        </div>\n        <div className=\"cell small-11\">\n          <CurrentColorContext.Provider value={this.state.currentColor}>\n                <Canvas size={this.props.gridSize} onClickBead={() => this.updateHistory(this.state.currentColor)} />\n          </CurrentColorContext.Provider>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Grid\n","import React from 'react'\nimport './size-picker.css'\n\nconst SizePicker = ({ submitSliderValue }) => {\n  const [sizeValue, setSizeValue] = React.useState(20)\n\n  return (\n    <div className=\"grid-y grid-padding-y align-center-middle text-center\" style={{height: '100%'}}>\n      <div className=\"cell small-1\">\n        <p>Pick grid size</p>\n      </div>\n      <div className=\"cell small-2\">\n        <input\n        id=\"grid-size-picker\" className=\"slider\"\n        type=\"range\" min=\"5\" max=\"50\" step=\"1\"\n        value={sizeValue}\n        onChange={(e) => {setSizeValue(e.target.value)}}\n        />\n        <br />\n        {sizeValue} x {sizeValue}\n      </div>\n      <div className=\"cell small-1\">\n      <button\n        type=\"button\" className=\"success button\"\n        onClick={(e)=>{\n          e.stopPropagation()\n          submitSliderValue(sizeValue)}\n        }\n      >\n        Let's go!\n      </button>\n      </div>\n    </div>\n  )\n}\n\nexport default SizePicker","import React from 'react'\nimport './App.css'\nimport Grid from './components/grid'\nimport SizePicker from './components/size-picker'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { gridSize: 0 }\n  }\n\n  render(){\n    const gridSize = this.state.gridSize\n    return (\n      <div className=\"App\" style={{height: '100%'}}>\n        {gridSize > 0 ?\n        <Grid gridSize={gridSize} goHome={() => { this.setState({gridSize: 0}) }} /> :\n        <SizePicker submitSliderValue={(v) => { this.setState({gridSize: parseInt(v)})} } />}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}